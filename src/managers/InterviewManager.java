package src.managers;

import src.main.Interview;
import src.main.JobPosting;
import utilities.IBIO;
import users.Applicant;
import users.Interviewer;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;

public class InterviewManager implements Serializable {
// InterviewerManager is responsible for managing lists of Interviews/Applicants for each interviewer

    private Interviewer interviewer;
    private ArrayList<Interview> invitedInterviews;  // interviews whose interviewers are generated by interviewer self-signUp
    private ArrayList<Interview> finishedInterviews;
    private HashMap<Interview, Boolean> currentInterviews;  // value == true means the interview is completed and vice versa
    private HashMap<Integer, ArrayList<Applicant>> recommendedApp;  // key: jobID
    private HashMap<Integer, ArrayList<Applicant>> rejectedApp;  // key: jobID

    public InterviewManager(Interviewer interviewer) {
        this.interviewer = interviewer;
        this.recommendedApp = new HashMap<>();
        this.rejectedApp = new HashMap<>();
        this.currentInterviews = new HashMap<>();
        this.invitedInterviews = new ArrayList<>();
        this.finishedInterviews = new ArrayList<>();
    }

    public void updateInvitedInterviews() {
        ArrayList<Interview> toRemove = new ArrayList<>();
        Calendar todayDate = Calendar.getInstance();
        for (Interview interview : invitedInterviews) {
            Calendar intDate = interview.getNextIntDate();
            if (interview.hasEnoughInterviewers() || !todayDate.before(intDate) ||
                    interview.getInterviewers().contains(interviewer)) {
                toRemove.add(interview);
            }
        }
        invitedInterviews.removeAll(toRemove);
    }

    public void updateFinishedInterviews() {
        ArrayList<Interview> toRemove = new ArrayList<>();
        for (Interview interview : currentInterviews.keySet()) {
            if (currentInterviews.get(interview)) {
                toRemove.add(interview);
                finishedInterviews.add(interview);
            }
        }
        for (Interview interview: toRemove) {currentInterviews.remove(interview);}
    }

    public int displayInvitedInterviews() {
        System.out.println("_______________________");
        System.out.println("| Available Interviews |");
        System.out.println("|______________________|\n");
        updateInvitedInterviews();      // Criteria of available interviews: 1. not enough interviewers AND 2.this interviewer didn't sign up for it
        for (Interview interview : invitedInterviews) {                 // AND 3. before the date that the interview takes place
            int num = invitedInterviews.indexOf(interview) + 1;
            SimpleDateFormat format = new SimpleDateFormat("EEEE, MMMM d, yyyy");
            String nextIntDateString = format.format(interview.getNextIntDate().getTime());
            System.out.println("| (" + num + ") Interviewee: " + interview.getInterviewee().getName() +
                    "  InterviewType: " + interview.getStatus() +
                    "  JobTitle: " + interview.getJobPosting().getName() +
                    "  Date: " + nextIntDateString + ". \n");
        }
        System.out.println("| (-1) " + "Finish");
        return (IBIO.inputInt("| Enter a number: "));
    }

    public Interview getIntByJobIdAndAppId(int jobId, int applicantId) {
        while (true) {
            for (Interview interview : currentInterviews.keySet()) {  // search int among currentInts
                int id = interview.getJobPosting().getID();
                int appId = interview.getInterviewee().getUserID();
                if ((id == jobId) & (appId == applicantId))
                    return interview;
            }
            System.out.println("Error: Current interview with such Job Id & Applicant Id not found :((");
            int id = IBIO.inputInt("Enter the JobId whose " +
                    "interviewee is tha applicant (-1 to re-enter Applicant Id): ");
        }
    }

    public void recApplicant(Interview interview, Applicant applicant, boolean recommendApp) {
        JobPosting job = interview.getJobPosting();
        int jobId = job.getID();
        currentInterviews.put(interview, true);
        updateFinishedInterviews();
        if (recommendApp) {addRecommendedApp(jobId, applicant);}
        else {
            addRejectedApp(jobId, applicant);
            job.getRejected().add(applicant);
            job.getJobApplications().remove(applicant.getAllApps().get(job));
            // applicant is added to a job's rejected list as long as he's rejected by one interviewer
            // while he will be added to job's recommended list only when he's rec by all interviewer(s) of his interview
            applicant.getAllInts().remove(interview);           // notify applicant that he's been rejected
            applicant.getAllInts().put(interview, "| Unfortunately you are not able to enter the next round of interview.");
        }
    }

    public void removeInterview(Interview interview) {
        int jobId = interview.getJobPosting().getID();
        recommendedApp.remove(jobId);
        currentInterviews.remove(interview);
        invitedInterviews.remove(interview);
        // finishedInterviews.remove(interview);
    }

    // Getters:
    public ArrayList<Interview> getInvitedInterviews() {return invitedInterviews;}

    public ArrayList<Interview> getFinishedInterviews() { return finishedInterviews; }

    public HashMap<Interview, Boolean> getCurrentInterviews() { return currentInterviews; }

    public HashMap<Integer, ArrayList<Applicant>> getRecApplicants() {return recommendedApp;}

    // Setters:
    public void addNewInterview(Interview interview) {currentInterviews.put(interview, false);}

    public void addInvitedInterview(Interview interview) {invitedInterviews.add(interview);}

    public void addRecommendedApp(int jobId, Applicant applicant) {
        ArrayList<Applicant> list = new ArrayList<>();
        if (recommendedApp.containsKey(jobId)) { list = recommendedApp.get(jobId); }
        list.add(applicant);
        recommendedApp.put(jobId, list);
    }

    public void addRejectedApp(int jobId, Applicant applicant) {
        ArrayList<Applicant> list = new ArrayList<>();
        if (rejectedApp.containsKey(jobId)) { list = rejectedApp.get(jobId); }
        list.add(applicant);
        rejectedApp.put(jobId, list);
    }
}
